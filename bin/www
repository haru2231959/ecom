require('dotenv').config();
require('express-async-errors');

const express = require('express');
const helmet = require('helmet');
const compression = require('compression');
const cors = require('cors');
const morgan = require('morgan');

// Import middleware
const { rateLimiterMiddleware } = require('./middlewares/rateLimiter');
const { errorHandler, notFoundHandler } = require('./middlewares/errorHandler');

// Import routes  
const routes = require('./routes');

// Import database
const db = require('./models');

// Import utils
const { logger } = require('./utils/logger');
const { ApiResponse } = require('./utils/response');

const app = express();

// Trust proxy - important for production behind load balancer
app.set('trust proxy', 1);

// Basic middleware setup
app.use(express.json({ 
  limit: '10mb',
  verify: (req, res, buf) => {
    req.rawBody = buf;
  }
}));
app.use(express.urlencoded({ 
  extended: true, 
  limit: '10mb' 
}));

// Security middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
  crossOriginEmbedderPolicy: false
}));

// CORS configuration
const corsOptions = {
  origin: function (origin, callback) {
    // Allow requests with no origin (mobile apps, postman, etc.)
    if (!origin) return callback(null, true);
    
    const allowedOrigins = process.env.ALLOWED_ORIGINS 
      ? process.env.ALLOWED_ORIGINS.split(',')
      : ['http://localhost:3000', 'http://localhost:3001', 'http://localhost:8080'];
    
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  credentials: true,
  optionsSuccessStatus: 200,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
};

app.use(cors(corsOptions));

// Compression middleware
app.use(compression({
  level: 6,
  threshold: 1024,
  filter: (req, res) => {
    if (req.headers['x-no-compression']) {
      return false;
    }
    return compression.filter(req, res);
  }
}));

// Logging middleware
const morganFormat = process.env.NODE_ENV === 'production' 
  ? 'combined' 
  : 'dev';

app.use(morgan(morganFormat, {
  stream: {
    write: (message) => {
      logger.info(message.trim());
    }
  },
  skip: (req, res) => {
    // Skip logging for health checks in production
    return process.env.NODE_ENV === 'production' && req.url === '/health';
  }
}));

// Rate limiting
app.use(rateLimiterMiddleware);

// Data sanitization against NoSQL query injection
app.use((req, res, next) => {
  if (req.body) {
    const sanitizeObject = (obj) => {
      for (let key in obj) {
        if (typeof obj[key] === 'object' && obj[key] !== null) {
          sanitizeObject(obj[key]);
        } else if (typeof obj[key] === 'string') {
          // Remove potential MongoDB operators
          obj[key] = obj[key].replace(/[${}]/g, '');
        }
      }
    };
    sanitizeObject(req.body);
  }
  next();
});

// Parameter pollution prevention
app.use((req, res, next) => {
  const whitelist = ['sort', 'page', 'limit', 'filter', 'fields'];
  
  for (let key in req.query) {
    if (Array.isArray(req.query[key]) && !whitelist.includes(key)) {
      req.query[key] = req.query[key][req.query[key].length - 1];
    }
  }
  next();
});

// Static files
app.use('/uploads', express.static('storage/uploads', {
  maxAge: '1d',
  etag: true,
  lastModified: true
}));

// Request ID middleware for tracking
app.use((req, res, next) => {
  req.id = require('crypto').randomBytes(16).toString('hex');
  res.set('X-Request-ID', req.id);
  next();
});

// Health check endpoint
app.get('/health', async (req, res) => {
  try {
    // Check database connection
    await db.sequelize.authenticate();
    
    const healthData = {
      status: 'OK',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      memory: {
        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
      },
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0',
      database: 'connected',
      requestId: req.id
    };

    res.status(200).json(ApiResponse.success(healthData, 'System is healthy'));
  } catch (error) {
    logger.error('Health check failed:', error);
    
    const healthData = {
      status: 'ERROR',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development',
      database: 'disconnected',
      error: error.message
    };

    res.status(503).json(ApiResponse.serviceUnavailable('System is unhealthy', healthData));
  }
});

// API status endpoint
app.get('/status', (req, res) => {
  res.status(200).json(ApiResponse.success({
    service: 'Express E-commerce API',
    version: process.env.npm_package_version || '1.0.0',
    environment: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString(),
    endpoints: {
      health: '/health',
      docs: '/api-docs',
      api: '/api/v1'
    }
  }));
});

// API routes
app.use('/api', routes);

// Swagger documentation (only in development)
if (process.env.NODE_ENV !== 'production' && process.env.SWAGGER_ENABLED !== 'false') {
  try {
    const swaggerUi = require('swagger-ui-express');
    const swaggerDocument = require('../docs/swagger.json');
    
    app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument, {
      explorer: true,
      customCss: `
        .swagger-ui .topbar { display: none }
        .swagger-ui .info { margin: 20px 0; }
        .swagger-ui .info .title { color: #3b4151; }
      `,
      customSiteTitle: "Express E-commerce API Documentation"
    }));
    
    logger.info('📚 Swagger documentation available at /api-docs');
  } catch (error) {
    logger.warn('Swagger documentation not available:', error.message);
  }
}

// Root endpoint
app.get('/', (req, res) => {
  res.status(200).json(ApiResponse.success({
    message: 'Welcome to Express E-commerce API',
    version: process.env.npm_package_version || '1.0.0',
    documentation: process.env.NODE_ENV !== 'production' ? '/api-docs' : null,
    health: '/health',
    status: '/status'
  }));
});

// 404 handler for undefined routes
app.use('*', notFoundHandler);

// Global error handler (must be last)
app.use(errorHandler);

// Database initialization
const initializeDatabase = async () => {
  try {
    // Test database connection
    await db.sequelize.authenticate();
    logger.info('✅ Database connected successfully');

    // Sync models in development only
    if (process.env.NODE_ENV === 'development' && process.env.DB_SYNC === 'true') {
      await db.sequelize.sync({ alter: true });
      logger.info('🔄 Database synced successfully');
    }

    return true;
  } catch (error) {
    logger.error('❌ Database connection failed:', error);
    throw error;
  }
};

// Graceful shutdown handler
const gracefulShutdown = async (signal) => {
  logger.info(`${signal} received, shutting down gracefully...`);
  
  try {
    // Close database connections
    if (db && db.sequelize) {
      await db.sequelize.close();
      logger.info('🔌 Database connections closed');
    }

    // Close Redis connections if any
    // if (redis) {
    //   await redis.quit();
    //   logger.info('🔌 Redis connection closed');
    // }
    
    logger.info('✅ Graceful shutdown completed');
    process.exit(0);
  } catch (error) {
    logger.error('❌ Error during shutdown:', error);
    process.exit(1);
  }
};

// Signal handlers for graceful shutdown
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// Unhandled rejection handler
process.on('unhandledRejection', (err, promise) => {
  logger.error('Unhandled Promise Rejection:', {
    error: err.message,
    stack: err.stack,
    promise: promise
  });
  
  // Close server gracefully
  gracefulShutdown('UNHANDLED_REJECTION');
});

// Uncaught exception handler
process.on('uncaughtException', (err) => {
  logger.error('Uncaught Exception:', {
    error: err.message,
    stack: err.stack
  });
  
  // Close server gracefully
  gracefulShutdown('UNCAUGHT_EXCEPTION');
});

// Process warning handler
process.on('warning', (warning) => {
  logger.warn('Process Warning:', {
    name: warning.name,
    message: warning.message,
    stack: warning.stack
  });
});

// Export app and initialization function
module.exports = { app, initializeDatabase, gracefulShutdown };